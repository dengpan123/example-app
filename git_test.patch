Index: conf/application.conf
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- conf/application.conf	(revision 7645970163c740d26c502119207bdf9fbbcb8ae8)
+++ conf/application.conf	(revision )
@@ -58,20 +58,26 @@
 #db.default.password=123456
 
 # Evolutions
-play.evolutions.enabled=true
+play.evolutions.enabled=false
 play.evolutions.autoApply=true
 play.evolutions.useLocks=true
 play.evolutions.autocommit=false
 application.name=computer-database
 
-akka.log-level = "WARN"
+akka.log-level = "DEBUG"
 
 # Database configuration
 # ~~~~~
 # You can declare as many datasources as you want.
 # By convention, the default datasource is named `default`
-db.default.driver=org.h2.Driver
-db.default.url="jdbc:h2:mem:play"
+#db.default.driver=org.h2.Driver
+#db.default.url="jdbc:h2:mem:play"
+db.default.pool="hikaricp"
+db.default.hikaricp.maximumPoolSize=5
+db.default.driver=com.mysql.jdbc.Driver
+db.default.url="jdbc:mysql://localhost:3306/test"
+db.default.username=development
+db.default.password=123456
 # Ebean configuration
 # ~~~~~
 # You can declare as many Ebean servers as you want.
Index: conf/routes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- conf/routes	(revision 7645970163c740d26c502119207bdf9fbbcb8ae8)
+++ conf/routes	(revision )
@@ -22,3 +22,10 @@
 
 # Delete a computer
 POST    /computers/:id/delete       controllers.HomeController.delete(id:Long)
+
+
+POST  /jsondata/getrequest          controllers.JsonTestController.getRequest()
+POST  /jsondata/queryComputer       controllers.JsonTestController.queryComputer()
+POST  /jsondata/addcomputer         controllers.JsonTestController.addComputer()
+POST  /jsondata/update              controllers.JsonTestController.updateComputer()
+POST  /jsondata/delete              controllers.JsonTestController.delele()
\ No newline at end of file
Index: app/models/Computer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/models/Computer.java	(revision 7645970163c740d26c502119207bdf9fbbcb8ae8)
+++ app/models/Computer.java	(revision )
@@ -1,6 +1,7 @@
 package models;
 
 import java.util.*;
+import javax.naming.Name;
 import javax.persistence.*;
 
 import com.avaje.ebean.Model;
@@ -13,25 +14,72 @@
  * Computer entity managed by Ebean
  */
 @Entity
+@Table(name = "computer")
 public class Computer extends Model {
 
     private static final long serialVersionUID = 1L;
 
     @Id
+    @Column(name = "id")
+    @GeneratedValue
     public Long id;
 
     @Constraints.Required
+    @Column(name = "name")
     public String name;
 
     @Formats.DateTime(pattern="yyyy-MM-dd")
+    @Column(name = "introduced")
     public Date introduced;
 
     @Formats.DateTime(pattern="yyyy-MM-dd")
+    @Column(name = "discontinued")
     public Date discontinued;
 
     @ManyToOne
+    @JoinColumn(name = "company_id")
     public Company company;
 
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Date getIntroduced() {
+        return introduced;
+    }
+
+    public void setIntroduced(Date introduced) {
+        this.introduced = introduced;
+    }
+
+    public Date getDiscontinued() {
+        return discontinued;
+    }
+
+    public void setDiscontinued(Date discontinued) {
+        this.discontinued = discontinued;
+    }
+
+    public Company getCompany() {
+        return company;
+    }
+
+    public void setCompany(Company company) {
+        this.company = company;
+    }
+
     /**
      * Generic query helper for entity Computer with id Long
      */
Index: conf/logback.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- conf/logback.xml	(revision 7645970163c740d26c502119207bdf9fbbcb8ae8)
+++ conf/logback.xml	(revision )
@@ -12,7 +12,7 @@
     The logger name is typically the Java/Scala package name.
     This configures the log level to log at for a package and its children packages.
   -->
-  <logger name="play" level="INFO" />
+  <logger name="play" level="DEBUG" />
   <logger name="application" level="DEBUG" />
 
   <root level="ERROR">
Index: app/models/Company.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/models/Company.java	(revision 7645970163c740d26c502119207bdf9fbbcb8ae8)
+++ app/models/Company.java	(revision )
@@ -11,17 +11,36 @@
 /**
  * Company entity managed by Ebean
  */
-@Entity 
+@Entity
+@Table(name = "company")
 public class Company extends com.avaje.ebean.Model {
 
     private static final long serialVersionUID = 1L;
 
     @Id
+    @Column(name = "id")
     public Long id;
     
     @Constraints.Required
+    @Column(name = "name")
     public String name;
-    
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
     /**
      * Generic query helper for entity Company with id Long
      */
Index: app/Repository/ComputerDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Repository/ComputerDAO.java	(revision )
+++ app/Repository/ComputerDAO.java	(revision )
@@ -0,0 +1,24 @@
+package Repository;
+
+import com.avaje.ebean.Ebean;
+import models.Computer;
+
+/**
+ * Created by admin on 17/6/15.
+ */
+public class ComputerDAO {
+    public Computer getCouponByCode(Integer id) {
+       return Computer.find.where().eq("id",id).findUnique();
+    }
+
+    public  void create(Computer computer){
+        computer.save();
+    }
+    public void update(Computer computer){
+        computer.update();
+    }
+
+    public  void delete(Long id){
+        Computer.find.ref(id).delete();
+    }
+}
Index: app/controllers/JsonTestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/controllers/JsonTestController.java	(revision )
+++ app/controllers/JsonTestController.java	(revision )
@@ -0,0 +1,80 @@
+package controllers;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+import models.Company;
+import models.Computer;
+import play.Logger;
+import play.libs.Json;
+import play.mvc.BodyParser;
+import play.mvc.Controller;
+import play.mvc.Result;
+import service.JsonTestService;
+
+import javax.inject.Inject;
+import java.io.IOException;
+import java.util.Date;
+
+/**
+ * Created by admin on 17/6/15.
+ */
+public class JsonTestController extends Controller{
+    public void setJsonTestService(JsonTestService jsonTestService) {
+        this.jsonTestService = jsonTestService;
+    }
+
+    @Inject
+    private JsonTestService jsonTestService;
+
+
+    @BodyParser.Of(BodyParser.Json.class)
+    public Result getRequest() {
+        JsonNode json = request().body().asJson();
+        return ok(json);
+    }
+    @BodyParser.Of(BodyParser.Json.class)
+    public  Result queryComputer(){
+        JsonNode json = request().body().asJson();
+        Computer computer=this.jsonTestService.queryComputer(json.get("id").asInt());
+        return ok(Json.toJson(computer));
+    }
+    @BodyParser.Of(BodyParser.Json.class)
+    public  Result addComputer(){
+        ObjectNode result= Json.newObject();
+        Computer computer= new Computer();
+        JsonNode node=request().body().asJson();
+        computer.setName(node.get("name").asText());
+        computer.setDiscontinued(new Date());
+        computer.setIntroduced(new Date());
+        Company company=new Company();
+        company.setId(node.get("company_id").asLong());
+        computer.setCompany(company);
+        this.jsonTestService.create(computer);
+        return ok(result.put("status","success"));
+    }
+    @BodyParser.Of(BodyParser.Json.class)
+    public Result updateComputer(){
+        ObjectNode result= Json.newObject();
+        ObjectMapper mapper=new ObjectMapper();
+        JsonNode node=request().body().asJson();
+        Computer computer=new Computer();
+        computer.setId(node.get("id").asLong());
+        computer.setName(node.get("name").asText());
+        computer.setDiscontinued(new Date());
+        computer.setIntroduced(new Date());
+        Company company=new Company();
+        company.setId(node.get("company_id").asLong());
+        computer.setCompany(company);
+        this.jsonTestService.update(computer);
+        return ok(result.put("status","success"));
+    }
+    @BodyParser.Of(BodyParser.Json.class)
+    public Result delele(){
+        JsonNode node=request().body().asJson();
+        ObjectNode result= Json.newObject();
+        this.jsonTestService.delete(node.get("id").asLong());
+        return ok(result.put("status","success"));
+    }
+
+}
Index: app/service/JsonTestService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/service/JsonTestService.java	(revision )
+++ app/service/JsonTestService.java	(revision )
@@ -0,0 +1,70 @@
+package service;
+
+import Repository.ComputerDAO;
+import com.avaje.ebean.Ebean;
+import com.avaje.ebean.Transaction;
+import models.Computer;
+import play.Logger;
+
+import javax.inject.Inject;
+
+/**
+ * Created by admin on 17/6/15.
+ */
+public class JsonTestService {
+
+    @Inject
+    private ComputerDAO computerDAO;
+
+    public void setComputerDAO(ComputerDAO computerDAO) {
+        this.computerDAO = computerDAO;
+    }
+
+    public Computer getCouponByCode(Integer id) {
+        return computerDAO.getCouponByCode(id);
+    }
+
+    public  Computer queryComputer(Integer id){
+        return this.computerDAO.getCouponByCode(id);
+    }
+
+    public  void create(Computer computer){
+        Transaction txn = Ebean.beginTransaction();
+        try{
+            this.computerDAO.create(computer);
+            txn.commit();
+        }catch (Exception e){
+            Logger.info("create fail!",e);
+            txn.rollback();
+        }finally {
+            txn.end();
+        }
+
+    }
+    public void update(Computer computer){
+        Logger.info("execute  update");
+        Transaction txn = Ebean.beginTransaction();
+        try{
+            this.computerDAO.update(computer);
+            txn.commit();
+        }catch (Exception e){
+            Logger.info("update fail!",e);
+            txn.rollback();
+        }finally {
+            txn.end();
+        }
+    }
+
+    public  void delete(Long id){
+        Transaction txn = Ebean.beginTransaction();
+        try{
+            this.computerDAO.delete(id);
+            txn.commit();
+        }catch (Exception e){
+            Logger.info("delete fail!",e);
+            txn.rollback();
+        }finally {
+            txn.end();
+        }
+    }
+}
